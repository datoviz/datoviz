name: "TEST"

# Trigger on push and PR on main
on:
  workflow_dispatch: # enable manual workflow trigger from the GitHub website
  push:
    # branches:
    #   - main
  pull_request:
    branches:
      - main

env:
  DVZ_LOG_LEVEL: 2  # 1 for DEBUG and 0 for TRACE
  USING_ACT: 0  # will be 1 when using "just act", skip repo cloning to use local instead

jobs:

  # -----------------------------------------------------------------------------------------------
  # Linux
  # -----------------------------------------------------------------------------------------------

  test-linux:
    if: ${{ false }}
    runs-on: ubuntu-latest

    # Use a pre-built Docker image with all build and run dependencies.
    container:
      image: rossant/datoviz_ubuntu

    # Clone the repo (except if local with "act")
    steps:
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Build the library (except if local with "act")
    - name: Build
      if: env.USING_ACT == 0
      run: just build || just build

      #Â WARNING: disabling the MIT-SHM X extension is crucial as it avoid random X crashes that
      # make the tests fail.
    - name: Test
      run:
        xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24 -extension MIT-SHM" ./build/datoviz test

  # -----------------------------------------------------------------------------------------------
  # macOS
  # -----------------------------------------------------------------------------------------------

  test-macos:
    if: ${{ false }}
    runs-on: macos-latest

    # Clone the repo (except if local with "act")
    steps:
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive


    # Cache Homebrew dependencies
    - name: Cache Homebrew
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/Homebrew/Library/Homebrew
          /usr/local/Cellar
          /usr/local/var/homebrew/linked
        key: ${{ runner.os }}-brew-${{ hashFiles('~/.Brewfile') }}
        restore-keys: |
          ${{ runner.os }}-brew-

    # Install Homebrew dependencies
    - name: Homebrew Dependencies
      run: |
        brew update
        brew bundle dump --force --file ~/.Brewfile || true
        brew install just ccache ninja clang-format tree cloc

    # Cache pip dependencies
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Install pip dependencies
    - name: Python dependencies
      run: pip install -r requirements-dev.txt


    # HACK: the compilation fails because the compiler uses the Mono freetype which
    # does not work for some reason. So here we just brutally remove the Mono framework
    # that we don't need for building.
    - name: FreeType fixes
      run: |
        sudo rm -rf /Library/Frameworks/Mono.framework
        export CPATH=$(brew --prefix freetype)/include/freetype2:$CPATH
        export LIBRARY_PATH=$(brew --prefix freetype)/lib:$LIBRARY_PATH
        export PKG_CONFIG_PATH=$(brew --prefix freetype)/lib/pkgconfig:$PKG_CONFIG_PATH

    # Build the library (except if local with "act")
    - name: Build
      if: env.USING_ACT == 0
      run: just build || just build

    # Run the tests
    - name: Test
      run:
        ./build/datoviz test

  # -----------------------------------------------------------------------------------------------
  # Windows
  # -----------------------------------------------------------------------------------------------

  test-windows:
    runs-on: windows-latest

    # NOTE: Windows Docker images are not yet supported on GitHub Actions
    # see https://github.com/docker/build-push-action/issues/18
    # In the meantime we just replicate the Dockerfile steps here.

    # Use a pre-built Docker image with all build and run dependencies.
    # container:
    #   image: rossant/datoviz_windows

    steps:

    - name: Cache Chocolatey
      uses: actions/cache@v4
      with:
        path: C:\ProgramData\chocolatey
        key: ${{ runner.os }}-choco-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-choco-

    # Install Chocolatey dependencies
    - name: Chocolatey dependencies
      run: |
        choco install git -y --params "/GitAndUnixToolsOnPath"
        choco install 7zip -y
        # choco install python --version=3.12 -y

    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg
          C:/mingw64
          C:/VulkanSDK
        key: ${{ runner.os }}-build-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-

    # Download the build dependencies
    - name: Build dependencies
      run: |
        curl -LO https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-18.1.8-12.0.0-ucrt-r1/winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-18.1.8-mingw-w64ucrt-12.0.0-r1.zip
        curl -LO https://github.com/casey/just/releases/download/1.35.0/just-1.35.0-x86_64-pc-windows-msvc.zip
        curl -LO https://sdk.lunarg.com/sdk/download/1.3.280.0/windows/vulkan-sdk.exe
        if (!(Test-Path "C:\vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        }

    # Decompress the downloaded archives using 7-Zip
    - name: Decompressing
      run: |
        7z x winlibs*.zip -oC:/
        7z x just-1.35.0-x86_64-pc-windows-msvc.zip -oC:/mingw64/bin/

    # Install vcpkg
    - name: vcpkg
      run: powershell.exe -NoProfile -ExecutionPolicy Bypass C:\vcpkg\scripts\bootstrap.ps1

    # Install Vulkan SDK silently
    - name: Vulkan SDK
      run: .\vulkan-sdk.exe --accept-licenses --default-answer --confirm-command install

    # Add environment variables for vcpkg, Python, and other paths
    - name: Environment variables
      run: |
        echo "C:/vcpkg" >> $GITHUB_PATH
        echo "C:/mingw64/bin" >> $GITHUB_PATH
        echo "C:/VulkanSDK/1.3.280.0/Bin" >> $GITHUB_PATH
        echo "C:/Python312" >> $GITHUB_PATH
        echo "C:/Python312/Scripts" >> $GITHUB_PATH

    # Install Python dependencies (pip packages)
    - name: Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt


    # Clone the repo (except if local with "act")
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Build the project
    - name: Build
      run: |
        just build || just build

    # Run the tests
    - name: Test
      run: |
        ./build/datoviz.exe test
