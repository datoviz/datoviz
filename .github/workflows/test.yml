name: "TEST"

# Trigger on push and PR on main
on:
  workflow_dispatch: # enable manual workflow trigger from the GitHub website
  push:
    # branches:
    #   - main
  pull_request:
    branches:
      - main

env:
  DVZ_LOG_LEVEL: 2  # 1 for DEBUG and 0 for TRACE
  USING_ACT: 0  # will be 1 when using "just act", skip repo cloning to use local instead

jobs:

  # -----------------------------------------------------------------------------------------------
  # Linux
  # -----------------------------------------------------------------------------------------------

  test-linux:
    if: ${{ false }}
    runs-on: ubuntu-latest

    # Use a pre-built Docker image with all build and run dependencies.
    container:
      image: rossant/datoviz_build

    # Clone the repo (except if local with "act")
    steps:
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Build the library (except if local with "act")
    - name: Build
      if: env.USING_ACT == 0
      run: just build || just build

      #Â WARNING: disabling the MIT-SHM X extension is crucial as it avoid random X crashes that
      # make the tests fail.
    - name: Test
      run:
        xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24 -extension MIT-SHM" ./build/datoviz test

  # -----------------------------------------------------------------------------------------------
  # macOS
  # -----------------------------------------------------------------------------------------------

  test-macos:
    if: ${{ false }}
    runs-on: macos-latest

    # Clone the repo (except if local with "act")
    steps:
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Install the build dependencies
    - name: Dependencies
      run: |
        brew install just ccache ninja clang-format tree cloc
        pip install -r requirements-dev.txt

    # HACK: the compilation fails because the compiler uses the Mono freetype which
    # does not work for some reason. So here we just brutally remove the Mono framework
    # that we don't need for building.
    - name: FreeType fixes
      run: |
        sudo rm -rf /Library/Frameworks/Mono.framework
        export CPATH=$(brew --prefix freetype)/include/freetype2:$CPATH
        export LIBRARY_PATH=$(brew --prefix freetype)/lib:$LIBRARY_PATH
        export PKG_CONFIG_PATH=$(brew --prefix freetype)/lib/pkgconfig:$PKG_CONFIG_PATH

    # Build the library (except if local with "act")
    - name: Build
      if: env.USING_ACT == 0
      run: just build || just build

    # Run the tests
    - name: Test
      run:
        ./build/datoviz test

  # -----------------------------------------------------------------------------------------------
  # Windows
  # -----------------------------------------------------------------------------------------------

  test-windows:
    runs-on: windows-latest
    steps:

    # Step 1: Clone the repo (except if local with "act")
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Step 2: Set up the Git Bash shell
    - name: Install Git for Windows
      uses: bwoodsend/setup-winlibs-action@v1
      with:
        destination: "C:"

    # # Step 3: Install WinLibs GCC (latest UCRT version with POSIX threads)
    # - name: Install WinLibs GCC
    #   run: |
    #     curl -LO https://winlibs.com/gcc-latest-ucrt-posix-64.zip
    #     Expand-Archive -Path gcc-latest-ucrt-posix-64.zip -DestinationPath C:\
    #     echo "C:\mingw64\bin" | Out-File -FilePath $Env:GITHUB_ENV -Append

    # Step 4: Install just
    - name: Install just
      run: |
        curl -LO https://github.com/casey/just/releases/download/0.10.3/just-0.10.3-x86_64-pc-windows-msvc.zip
        Expand-Archive -Path just-0.10.3-x86_64-pc-windows-msvc.zip -DestinationPath C:\mingw64\bin

    # Step 5: Install the Vulkan SDK
    - name: Install LunarG Vulkan SDK
      run: |
        curl -LO https://sdk.lunarg.com/sdk/download/1.3.280.0/windows/vulkan-sdk.exe
        Start-Process -FilePath ./vulkan-sdk.exe -ArgumentList "/S" -NoNewWindow -Wait
        echo "C:\VulkanSDK\1.3.280.0\Bin" | Out-File -FilePath $Env:GITHUB_ENV -Append
        echo "C:\VulkanSDK\1.3.280.0\Lib" | Out-File -FilePath $Env:GITHUB_ENV -Append

    # Step 6: Install WSL2 and set it up
    - name: Install WSL2
      run: |
        wsl.exe --install
        wsl.exe --update
        wsl --set-default-version 2

    # Step 7: Install Python and required dependencies
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    # Step 8: Install vcpkg
    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        echo "C:\vcpkg" | Out-File -FilePath $Env:GITHUB_ENV -Append
        echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $Env:GITHUB_ENV -Append
        echo "C:\vcpkg\installed\x64-windows\lib" | Out-File -FilePath $Env:GITHUB_ENV -Append

    # Step 9: Add vcpkg to PATH
    - name: Set VCPKG environment variable
      run: |
        echo "export VCPKG_ROOT=C:/vcpkg" >> $HOME/.bash_profile
        echo "C:/vcpkg" >> $GITHUB_ENV
        echo "C:/vcpkg/installed/x64-windows/bin" >> $GITHUB_ENV
        echo "C:/vcpkg/installed/x64-windows/lib" >> $GITHUB_ENV

    # Step 10: Build the project
    - name: Build project
      run: |
        pip install -r requirements-dev.txt
        just build || just build

    # Step 11: Run the tests
    - name: Run tests
      run: |
        ./build/datoviz.exe test
