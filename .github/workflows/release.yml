name: "RELEASE"

# Trigger on tags
on:
  workflow_dispatch: # enable manual workflow trigger from the GitHub website
  push:
    # tags:
    #   - '*'

env:
  DVZ_LOG_LEVEL: 2  # 1 for DEBUG and 0 for TRACE
  USING_ACT: 0  # will be 1 when using "just act", skip repo cloning to use local instead

jobs:

  # -----------------------------------------------------------------------------------------------
  # Linux
  # -----------------------------------------------------------------------------------------------

  # Build the wheel on manylinux (AlmaLinux)
  wheel-linux:
    if: ${{ false }}
    runs-on: ubuntu-latest

    # Use a pre-built Docker image with all build and run dependencies.
    container:
      image: rossant/datoviz_manylinux

    # Create the directory
    steps:
    - name: Make directory
      run: mkdir -p /datoviz

    # Clone the repo (except if local with "act")
    - name: Checkout repository
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Conditionally copy local files using rsync when USING_ACT is 1
    - name: Sync local files
      run: |
        rsync -a -v \
          --exclude "libvulkan*" --exclude "glslc" \
          --exclude "__pycache__" --exclude "Dockerfile" \
          --exclude "screenshots" --exclude "volumes" --exclude "misc" \
          --exclude "imgui/examples" \
          bin cli cmake data datoviz external include libs src tests tools \
          justfile *.toml *.json *.txt *.map *.md *.cff \
          CMakeLists.txt *.map /datoviz/

    # Go to /datoviz and run "just release"
    - name: Build
      working-directory: /datoviz
      run: |
        mkdir -p build/
        cd build/
        CMAKE_CXX_COMPILER_LAUNCHER=ccache cmake .. -GNinja -DCMAKE_MESSAGE_LOG_LEVEL=INFO -DCMAKE_BUILD_TYPE=Release || true
        ninja || true
        CMAKE_CXX_COMPILER_LAUNCHER=ccache cmake .. -GNinja -DCMAKE_MESSAGE_LOG_LEVEL=INFO -DCMAKE_BUILD_TYPE=$release && \
        ninja

    # Build the wheel
    - name: Wheel
      working-directory: /datoviz
      run: |
        export PATH=$PATH:/opt/python/cp38-cp38/bin/
        just wheel almalinux=1

    # Test the wheel
    - name: Test
      working-directory: /datoviz
      run: |
        export PATH=$PATH:/opt/python/cp38-cp38/bin/
        just testwheel_local

    # Upload the wheel
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: linux-wheel
        path: /datoviz/dist/*.whl

  # -----------------------------------------------------------------------------------------------
  # macOS
  # -----------------------------------------------------------------------------------------------

  -wheel-macos:
    runs-on: macos-latest

    # Clone the repo (except if local with "act")
    steps:
    - name: Checkout
      if: env.USING_ACT == 0
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Install the build dependencies
    - name: Dependencies
      run: |
        brew install just ccache ninja clang-format tree cloc
        pip install -r requirements-dev.txt

    # HACK: the compilation fails because the compiler uses the Mono freetype which
    # does not work for some reason. So here we just brutally remove the Mono framework
    # that we don't need for building.
    - name: FreeType fixes
      run: |
        sudo rm -rf /Library/Frameworks/Mono.framework
        export CPATH=$(brew --prefix freetype)/include/freetype2:$CPATH
        export LIBRARY_PATH=$(brew --prefix freetype)/lib:$LIBRARY_PATH
        export PKG_CONFIG_PATH=$(brew --prefix freetype)/lib/pkgconfig:$PKG_CONFIG_PATH

    # Build the library (except if local with "act")
    - name: Build
      if: env.USING_ACT == 0
      run: just release || just release

    # Build the wheel
    - name: Wheel
      working-directory: /datoviz
      run: |
        just wheel

    # Upload the wheel
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: macos-wheel
        path: /datoviz/dist/*.whl

  # -----------------------------------------------------------------------------------------------
  # Windows
  # -----------------------------------------------------------------------------------------------

  # TODO

  # -----------------------------------------------------------------------------------------------
  # Release process
  # -----------------------------------------------------------------------------------------------

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [wheel-linux, wheel-macos, wheel-windows]  # Ensure this runs after all builds
  #   steps:
  #     - name: Download Linux wheel
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: linux-wheel

  #     - name: Download macOS wheel
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: macos-wheel

  #     - name: Download Windows wheel
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: windows-wheel

  #     - name: Create GitHub release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         release_name: ${{ github.ref_name }}
  #         draft: false
  #         prerelease: false
  #         files: |
  #           linux-wheel/*.whl
  #           macos-wheel/*.whl
  #           windows-wheel/*.whl
